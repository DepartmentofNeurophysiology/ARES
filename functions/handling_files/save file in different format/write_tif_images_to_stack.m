function [outputFileName, inputFileName] = write_tif_images_to_stack (img, options)
% Convert the selected folder of .tif files into a single (uncompressed) 
% image stack and return its file name.
% INPUT:
% - "img", is a struct containing info on the tif images to load.
%   each tif file to load should contain a single image.
%   It is generated by the function "get_img_series_info".
% - "options": a struct containing the options for running the function.
%   it can be generated via the User Interface, or provided as input.
% OUTPUT: 
% - "outputFileName": the name (string) of the output images stack.
% - "inputFileName": the name (string) of the input images series.


%% Getting file name
% Getting current folder
current_folder = pwd; file_sep = filesep;

% Get stack name = folder containing the image series
file_name_parts = strsplit(img.info.Filename, filesep);
folder_name = file_name_parts{end - 1};
if img.info.Filename(1) == filesep
    folder_name = [file_sep, folder_name];
end
if img.info.Filename(end) == filesep
    folder_name = [folder_name, file_sep];
end
inputFileName = file_name_parts{end};

extention_tif = '.tif';
outputFileName_tmp = strcat(folder_name, '_stack');
outputFileName = strcat(outputFileName_tmp, extention_tif);
if options.FLAG_user_custom_FileName == 1
    diag_win_prompt = {'Input the name you want to assign to the single tif stack, without extention.'};
    diag_win_name = 'Tif stack name.';
    default_FileName = {outputFileName};
    outputFileName_tmp = inputdlg(diag_win_prompt, diag_win_name, [1 40], default_FileName);
    outputFileName = outputFileName_tmp{1,1};
end


%% Checking if file_name already exists, if so add a "_new" at the end.
file_loc = sprintf('%s%s', current_folder, file_sep, outputFileName);
fprintf ('\nWriting output .tif stack...\n...\n');
if exist(file_loc, 'file')
    string_tmp = 'File already exists. Do you want to overwrite or save with a different name?';
    window_title = 'File already exists';
    FLAG_FileOverwrite = questdlg(string_tmp, window_title, 'Overwrite', 'Save but keep both files', 'Cancel', 'Overwrite');
    switch FLAG_FileOverwrite
        case 'Overwrite'
            % Use same name as previous.

            % Delete previous file
            if exist(outputFileName, 'file') ~= 0
                delete outputFileName
            end
        case 'Save but keep both files'
            outputFileName = sprintf('%s_new%s', outputFileName_tmp, extention_tif);
        case 'Cancel'
            fprintf('\nOperation aborted by user.\n\n');
            return
        otherwise
            error('Something went wrong with user selecting what to do.')
    end
end


%% Writing tif stack
img_tmp = img;
error_counter = 0;
while error_counter < 10 % Sometimes windows prevents matlab from writing the files, let's not talk about mac...
    try
        current_image = imread (img_tmp.files(1).name);
        imwrite(current_image, outputFileName, 'WriteMode', 'append',  'Compression', 'none');
        % Write rest of the stack.
        for i_image = 2:img_tmp.files_number
            current_image = imread (img_tmp.files(i_image).name);
            imwrite(current_image, outputFileName, 'WriteMode', 'append',  'Compression', 'none');
        end
        break
    catch
        warning('MATLAB failed at writing the tif stack output. Trying again automatically.')
        file_loc = sprintf('%s%s', current_folder, file_sep, outputFileName);
        if exist(file_loc, 'file')
            delete (file_loc);
        end
        error_counter = error_counter + 1;
        pause(1);
    end
  
end
if error_counter >= 10
   error('MATLAB could not save the output as .tif stack. This is a known problem associated with MATLAB. Please try again, or contact support.') 
end
fprintf('\nTif stack saved successfully.\n\n')

end